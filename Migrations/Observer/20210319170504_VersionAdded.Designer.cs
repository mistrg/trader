// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trader.PostgresDb;

namespace Trader.Migrations.Observer
{
    [DbContext(typeof(ObserverContext))]
    [Migration("20210319170504_VersionAdded")]
    partial class VersionAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Trader.PostgresDb.BotRun", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BotRuns");
                });

            modelBuilder.Entity("Trader.PostgresDb.ExchangeRuntimeInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BotRunId")
                        .HasColumnType("text");

                    b.Property<string>("ExchangeName")
                        .HasColumnType("text");

                    b.Property<long>("OrderBookFailCount")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderBookSuccessCount")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderBookTotalCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BotRunId");

                    b.ToTable("ExchangeRuntimeInfo");
                });

            modelBuilder.Entity("Trader.PostgresDb.OrderCandidate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("BotRunId")
                        .HasColumnType("text");

                    b.Property<int>("BotVersion")
                        .HasColumnType("integer");

                    b.Property<string>("BuyExchange")
                        .HasColumnType("text");

                    b.Property<double>("EstBuyFee")
                        .HasColumnType("double precision");

                    b.Property<double>("EstProfitGross")
                        .HasColumnType("double precision");

                    b.Property<double>("EstProfitNet")
                        .HasColumnType("double precision");

                    b.Property<double>("EstProfitNetRate")
                        .HasColumnType("double precision");

                    b.Property<double>("EstSellFee")
                        .HasColumnType("double precision");

                    b.Property<string>("Pair")
                        .HasColumnType("text");

                    b.Property<string>("SellExchange")
                        .HasColumnType("text");

                    b.Property<double>("TotalAskPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalBidPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("UnitAskPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("UnitBidPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("WhenBuySpoted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("WhenCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("WhenSellSpoted")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("OrderCandidates");
                });

            modelBuilder.Entity("Trader.PostgresDb.ExchangeRuntimeInfo", b =>
                {
                    b.HasOne("Trader.PostgresDb.BotRun", "Botrun")
                        .WithMany()
                        .HasForeignKey("BotRunId");

                    b.Navigation("Botrun");
                });
#pragma warning restore 612, 618
        }
    }
}
